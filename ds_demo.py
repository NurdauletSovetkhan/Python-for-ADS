# python -m streamlit run Python-for-ADS/ds_demo.py

import streamlit as st
import time
import random
from union_find import (
    QuickFind,
    QuickUnion,
    UnionByRank,
    PathCompressionOnly,
    UnionByRankWithPathCompression
)
import matplotlib.pyplot as plt




st.set_page_config(page_title="Disjoint Set Visualizer", layout="wide")

st.title("üìö Disjoint Set Data Structures")
tab1, tab2 = st.tabs(["üìò Theory", "‚öôÔ∏è Benchmarks"])


with tab1:
    st.header("üìò Theory and Tasks")

    st.markdown("""
    Disjoint Set (–∏–ª–∏ Union-Find) ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–º–∏—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏—Ö –∫–æ—Ä–Ω–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–¥–∞—á–∞—Ö –Ω–∞ –≥—Ä–∞—Ñ—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Å—Ç–æ–≤–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ (MST).
                –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é: https://docs.google.com/presentation/d/12VCENn-07ZMsSt0ZlJj_YpXNWtR3aEeNlLp6KD0PGf8/edit#slide=id.g20e53a1f10d_0_135
    """)
        
    st.subheader("üß† Task #1 ‚Äî Quick Find")
    st.markdown("""
    Quick Find ‚Äî –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Disjoint Set, –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ö—Ä–∞–Ω–∏—Ç —Å–≤–æ–π ID-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.  
    - **Union:** O(N)  
    - **Find:** O(1)  
    - **Space:** O(N)
    """)
    st.code("""
    class QuickFind:
        def __init__(self, n):
            self.id = list(range(n))

        def find(self, x):
            return self.id[x]

        def union(self, x, y):
            pid = self.id[x]
            qid = self.id[y]
            for i in range(len(self.id)):
                if self.id[i] == pid:
                    self.id[i] = qid
    """)

    st.subheader("üß† Task #2 ‚Äî Quick Union")
    st.markdown("""
    Quick Union ‚Äî —É–ª—É—á—à–µ–Ω–∏–µ, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è.  
    - **Union:** O(N)  
    - **Find:** O(N)  
    - **Space:** O(N)  
    **–†–∞–∑–Ω–∏—Ü–∞ —Å Quick Find:** union –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ find –º–µ–¥–ª–µ–Ω–Ω–µ–µ.
    """)
    st.code("""
    class QuickUnion:
        def __init__(self, n):
            self.parent = list(range(n))

        def find(self, x):
            while x != self.parent[x]:
                x = self.parent[x]
            return x

        def union(self, x, y):
            root_x = self.find(x)
            root_y = self.find(y)
            self.parent[root_x] = root_y
    """)

    st.subheader("üß† Task #3 ‚Äî Union by Rank")
    st.markdown("""
    Union by Rank ‚Äî –∫ Quick Union –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É (—Ä–∞–Ω–≥) –¥–µ—Ä–µ–≤–∞, —á—Ç–æ–±—ã —Å–æ–µ–¥–∏–Ω—è—Ç—å –º–µ–Ω—å—à–∏–µ –ø–æ –≤—ã—Å–æ—Ç–µ –ø–æ–¥ –±–æ–ª—å—à–∏–º–∏.  
    - **Union:** O(log N)  
    - **Find:** O(log N)
        """)
        
    st.code("""
    class UnionByRank:
        def __init__(self, n):
            self.parent = list(range(n))
            self.rank = [0] * n

        def find(self, x):
            while x != self.parent[x]:
                x = self.parent[x]
            return x

        def union(self, x, y):
            root_x = self.find(x)
            root_y = self.find(y)
            if root_x == root_y:
                return
            if self.rank[root_x] < self.rank[root_y]:
                self.parent[root_x] = root_y
            elif self.rank[root_x] > self.rank[root_y]:
                self.parent[root_y] = root_x
            else:
                self.parent[root_y] = root_x
                self.rank[root_x] += 1
            """)

    st.subheader("üß† Task #4 ‚Äî Path Compression")
    st.markdown("""
    Path Compression —É—Å–∫–æ—Ä—è–µ—Ç find, –¥–µ–ª–∞—è –≤—Å–µ —É–∑–ª—ã –ø–æ –ø—É—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –∫–æ—Ä–Ω–µ–º.  
    - **Union:** O(log N)  
    - **Find:** O(log N) ‚Üí O(Œ±(N)) –≤ –∞–º–æ—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º.
        """)
    st.code("""
    class PathCompression:
        def __init__(self, n):
            self.parent = list(range(n))

        def find(self, x):
            if x != self.parent[x]:
                self.parent[x] = self.find(self.parent[x])
            return self.parent[x]

        def union(self, x, y):
            root_x = self.find(x)
            root_y = self.find(y)
            if root_x != root_y:
                self.parent[root_x] = root_y
            """)

    st.subheader("üß† Task #5 ‚Äî Union by Rank + Path Compression")
    st.markdown("""
    –õ—É—á—à–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Disjoint Set: –¥–≤–∞ –ø–æ–¥—Ö–æ–¥–∞ –≤–º–µ—Å—Ç–µ.  
    - **Union & Find:** O(Œ±(N)) ‚Äî –ø–æ—á—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞  
    - **Space:** O(N)
        """)
    st.code("""
    class UnionByRankWithPathCompression:
        def __init__(self, n):
            self.parent = list(range(n))
            self.rank = [0] * n

        def find(self, x):
            if x != self.parent[x]:
                self.parent[x] = self.find(self.parent[x])
            return self.parent[x]

        def union(self, x, y):
            root_x = self.find(x)
            root_y = self.find(y)
            if root_x == root_y:
                return
            if self.rank[root_x] < self.rank[root_y]:
                self.parent[root_x] = root_y
            elif self.rank[root_x] > self.rank[root_y]:
                self.parent[root_y] = root_x
            else:
                self.parent[root_y] = root_x
                self.rank[root_x] += 1
            """)
    
with tab2:
    if "n" not in st.session_state:
        st.session_state.n = 10_000
    if "runs" not in st.session_state:
        st.session_state.runs = 50_000

    n = st.session_state.n
    runs = st.session_state.runs

    operations = [(random.randint(0, n - 1), random.randint(0, n - 1)) for _ in range(runs)]

    if st.button("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
        st.session_state.n = random.randint(10, 100_000)
        st.session_state.runs = random.randint(10, 100_000)
        st.rerun()

    n = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤", 10, 100_000, st.session_state.n, step=1000)
    runs = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π union/find", 10, 100_000, st.session_state.runs, step=1000)

    st.session_state.n = n
    st.session_state.runs = runs

    st.subheader("üìä –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å (Big-O)")

    st.markdown("""
    - **Quick Union**: O(N) ‚Äî find –∏ union –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ.
    - **Union by Rank**: O(log N) ‚Äî –¥–µ—Ä–µ–≤–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ.
    - **Union by Rank + Path Compression**: O(Œ±(N)) ‚Äî –ø–æ—á—Ç–∏ O(1) –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏.
    """)

    if st.button("üöÄ –°—Ç–∞—Ä—Ç –∑–∞–º–µ—Ä–∞"):
        times = {}

        qf = QuickFind(n)
        start = time.time()
        for x, y in operations:
            qf.union(x, y)
        times["Quick Find"] = time.time() - start

        qu = QuickUnion(n)
        start = time.time()
        for x, y in operations:
            qu.union(x, y)
        times["Quick Union"] = time.time() - start

        ubr = UnionByRank(n)
        start = time.time()
        for x, y in operations:
            ubr.union(x, y)
        times["Union by Rank"] = time.time() - start

        pco = PathCompressionOnly(n)
        start = time.time()
        for x, y in operations:
            pco.union(x, y)
        times["Path Compression"] = time.time() - start

        ubrpc = UnionByRankWithPathCompression(n)
        start = time.time()
        for x, y in operations:
            ubrpc.union(x, y)
        times["Rank + Path Compression"] = time.time() - start

        st.subheader("‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        st.write(f"**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:** {n} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, {runs} –æ–ø–µ—Ä–∞—Ü–∏–π")

        for name, t in times.items():
            st.write(f"**{name}**: {t:.5f} —Å–µ–∫")

        fig, ax = plt.subplots()
        ax.bar(times.keys(), times.values(), color=["blue", "red", "orange", "purple", "green"])
        ax.set_ylabel("–í—Ä–µ–º—è (—Å–µ–∫)")
        ax.set_title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Union-Find")
        plt.xticks(rotation=15)
        st.pyplot(fig)

   